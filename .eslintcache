[{"C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\index.js":"1","C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\reportWebVitals.js":"2","C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\App.js":"3","C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\components\\ContactCard.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":476,"mtime":1610589022374,"results":"8","hashOfConfig":"6"},{"size":1275,"mtime":1610589067340,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"ibdsx7",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\index.js",[],["20","21"],"C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\reportWebVitals.js",[],"C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\App.js",[],"C:\\Users\\gezim\\GitRepos\\TTP Repos\\contact-card\\src\\components\\ContactCard.jsx",["22"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport '../App.css';\r\n\r\nexport default class ContactCard extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: props.name,\r\n            email: props.email,\r\n            phone_num: props.phone_num,\r\n            work_num: props.work_num === undefined ? \"000-000-0000\" : props.work_num\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"card\">\r\n                <section>\r\n                    <img alt=\"photo\" src=\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\"/>\r\n                    <h4> {this.state.name} </h4>\r\n                </section>\r\n                <section>\r\n                    <h4> <span>Email: </span> {this.state.email} </h4>\r\n                    <h4> <span>Phone Number: </span> {this.state.phone_num} </h4>\r\n                    <h4> <span>Work Phone Number: </span> {this.state.work_num} </h4>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nContactCard.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    phone_num: PropTypes.string.isRequired,\r\n    work_num: PropTypes.string\r\n}",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":21,"column":21,"nodeType":"29","endLine":21,"endColumn":133},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]